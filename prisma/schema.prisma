// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("client") // client par défaut
  createdAt DateTime @default(now())
}

model Settings {
  id           Int     @id @default(autoincrement())
  siteName     String
  logo         String? // Stockera l'URL du logo
  primaryColor String? // Couleur principale

  // Navigattion
  showLogo     Boolean  @default(true)
  showSiteName Boolean  @default(true)
  navAlignment String   @default("left")
  navHeight    Int      @default(40)
  navBgColor   String   @default("#ffffff")
  navTextColor String   @default("#000000")
  createdAt    DateTime @default(now())

  // Footer
  footerBgColor   String  @default("#000000")
  footerTextColor String  @default("#ffffff")
  footerAlignment String  @default("center")
  showFooterLinks Boolean @default(false)

  // Liste des extensions autorisées pour l’upload
  allowedFileExtensions String @default("jpg,jpeg,png,gif,webp,svg,pdf,zip,mp4")

  // SEO global
  defaultTitleSuffix       String? // Titre par défaut (<title>)
  defaultMetaKeywords    String? // Mots-clés par défaut (CSV)
  defaultMetaImage       String? // URL image Open Graph par défaut
  defaultRobots          String? // ex. "index,follow"
}

model Page {
  id              Int              @id @default(autoincrement())
  title           String
  slug            String           @unique @default("")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt()
  blocks          Block[]
  navigationLinks NavigationLink[]
  isPublished     Boolean          @default(true)

    // SEO spécifiques
  metaTitle          String?
  metaDescription    String?
  metaKeywords       String?
  metaImage          String?
  metaRobots         String?   // ex. "noindex,nofollow"
  
}

model Block {
  id      Int    @id @default(autoincrement())
  type    String
  content String @db.LongText
  order   Int
  pageId  Int
  page    Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  formId  Int?
  form    Form?  @relation("FormBlocks", fields: [formId], references: [id], onDelete: SetNull)
}

model NavigationLink {
  id       Int     @id @default(autoincrement())
  label    String // Nom du lien
  type     String // "internal", "external", "dropdown"
  url      String? // URL si lien externe
  pageId   Int? // ID de la page si lien interne
  parentId Int? // Null si c'est un lien normal, sinon ID du parent si c'est un sous-menu
  position Int // Ordre d'affichage
  location String // "navbar" ou "footer"

  parent   NavigationLink?  @relation("ParentChildLinks", fields: [parentId], references: [id])
  children NavigationLink[] @relation("ParentChildLinks")
  page     Page?            @relation(fields: [pageId], references: [id], onDelete: SetNull)

  @@unique([parentId, position]) // Assure que les positions sont uniques par parent
}

model Form {
  id              Int              @id @default(autoincrement())
  slug            String           @unique // Pour le retrouver facilement
  title           String
  submitLabel     String
  successMessage  String
  emailTo         String?
  storeInDatabase Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  fields          FormField[] // Liste des champs associés
  submissions     FormSubmission[]
  blocks          Block[]          @relation("FormBlocks")
}

model FormField {
  id          Int     @id @default(autoincrement())
  formId      Int
  form        Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
  label       String
  name        String
  type        String // text, email, textarea, checkbox, etc.
  required    Boolean @default(false)
  placeholder String?
  order       Int // pour l’ordre d’affichage
}

model FormSubmission {
  id        Int      @id @default(autoincrement())
  formId    Int
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  data      Json // les réponses brutes
  emailSent Boolean  @default(false)
  createdAt DateTime @default(now())
}

model MailSettings {
  id               Int      @id @default(autoincrement())
  host             String
  port             Int
  user             String
  pass             String
  fromAddress      String
  defaultRecipient String?
  updatedAt        DateTime @updatedAt
}
